<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <!--字体：使用Noto Sans SC。中号字体(14号, Padding0)，小号字体(12号, Padding2,0)。统一Padding为0。-->
    <!--边框的圆角是4，内部元素的圆角是2-->

    <CornerRadius x:Key="WindowCorner">4</CornerRadius>
    <CornerRadius x:Key="ComponentCorner">2</CornerRadius>

    <FontFamily x:Key="Sans">Noto Sans SC</FontFamily>
    <FontFamily x:Key="SansBlack">Noto Sans SC Black</FontFamily>

    <!--符号文字（用于展示大符号）-->
    <Style x:Key="LabelSymbol" TargetType="Label">
        <Setter Property="FontFamily" Value="{StaticResource SansBlack}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    
    <!--M文字的Label-->
    <Style x:Key="LabelM" TargetType="Label">
        <Setter Property="FontFamily" Value="{StaticResource Sans}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="FontSize" Value="14"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>
    
    <!--S文字的Label-->
    <Style x:Key="LabelS" TargetType="Label">
        <Setter Property="FontFamily" Value="{StaticResource Sans}"/>
        <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="FontSize" Value="12"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!--右对齐的小标题-->
    <Style x:Key="LabelRight" TargetType="Label" BasedOn="{StaticResource LabelM}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
    </Style>

    <!--确认按钮-->
    <Style x:Key="ButtonConfirm" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <!--静置背景颜色-->
                    <Border x:Name="ButtonBorder"
                            Background="{DynamicResource SuccessColorBrush}"
                            BorderThickness="0"
                            CornerRadius="4"
                            Margin="4">
                        <Label Content="{TemplateBinding Content}"
                               Style="{DynamicResource LabelM}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--悬浮背景颜色-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder"
                                    Property="Background"
                                    Value="{DynamicResource SuccessLightColorBrush}"/>
                        </Trigger>
                        <!--按下背景颜色-->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder"
                                    Property="Background"
                                    Value="{DynamicResource SuccessDarkColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--取消按钮-->
    <Style x:Key="ButtonCancel" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <!--静置背景颜色-->
                    <Border x:Name="ButtonBorder"
                            Background="{DynamicResource ErrorColorBrush}"
                            BorderThickness="0"
                            CornerRadius="4"
                            Margin="4">
                        <Label Content="{TemplateBinding Content}"
                               Style="{DynamicResource LabelM}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--悬浮背景颜色-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder"
                                    Property="Background"
                                    Value="{DynamicResource ErrorLightColorBrush}"/>
                        </Trigger>
                        <!--按下背景颜色-->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder"
                                    Property="Background"
                                    Value="{DynamicResource ErrorDarkColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--普通按钮-->
    <Style x:Key="ButtonNormal" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <!--静置背景颜色-->
                    <Border x:Name="ButtonBorder"
                            Background="{DynamicResource GrayColorBrush}"
                            BorderThickness="0"
                            CornerRadius="4"
                            Margin="4">
                        <Label Content="{TemplateBinding Content}"
                               Style="{DynamicResource LabelM}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <!--悬浮背景颜色-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder"
                                    Property="Background"
                                    Value="{DynamicResource GrayLightColorBrush}"/>
                        </Trigger>
                        <!--按下背景颜色-->
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ButtonBorder"
                                    Property="Background"
                                    Value="{DynamicResource GrayDarkColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--用于下拉框的ToggleButton（只有右侧有圆角）-->
    <Style x:Key="ToggleButtonForComboBox" TargetType="ToggleButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <!--静置背景颜色-->
                    <Border x:Name="ButtonBorder"
                            Background="Transparent"
                            BorderThickness="0"
                            CornerRadius="0,4,4,0"/>
                    <ControlTemplate.Triggers>
                        <!--悬浮背景颜色-->
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style> 
    
    <!--下拉框-->
    <Style x:Key="ComboBoxNormal" TargetType="ComboBox">
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ComboBoxItem">
                    <Setter Property="FontFamily" Value="{StaticResource Sans}"/>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ComboBox">
                    <Grid Margin="4">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="4*"/>
                            <ColumnDefinition Width="1*" MaxWidth="24"/>
                        </Grid.ColumnDefinitions>
                        <Border Grid.Column="0"
                            Background="{DynamicResource BackgroundStrong}"
                            BorderBrush="{DynamicResource GrayColorBrush}"
                            BorderThickness="1,1,0,1"
                            CornerRadius="4,0,0,4">
                            <TextBox Text="{TemplateBinding Text}"
                                     FontFamily="{StaticResource Sans}"
                                     FontSize="12"
                                     Foreground="{DynamicResource Foreground}"
                                     Background="Transparent"
                                     VerticalAlignment="Center"
                                     BorderThickness="0"
                                     Padding="4,0"/>
                        </Border>
                        <Border Grid.Column="1"
                                Background="{DynamicResource PrimaryColorBrush}"
                                BorderBrush="{DynamicResource GrayColorBrush}"
                                BorderThickness="1"
                                CornerRadius="0,4,4,0">
                            <ToggleButton IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          ClickMode="Press"
                                          Style="{DynamicResource ToggleButtonForComboBox}"/>
                        </Border>
                        <Popup x:Name="BoxPopup"
                               IsOpen="{TemplateBinding IsDropDownOpen}"
                               Placement="Bottom">
                            <Border MinWidth="{TemplateBinding ActualWidth}"
                                    MaxWidth="{TemplateBinding MaxDropDownHeight}">
                                <ScrollViewer HorizontalScrollBarVisibility="Auto"
                                              VerticalScrollBarVisibility="Auto"
                                              MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                    <StackPanel Background="{DynamicResource BackgroundStrong}"
                                           IsItemsHost="True"/>
                                </ScrollViewer>
                            </Border>
                        </Popup>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--单选框-->
    <Style x:Key="RadioButtonNormal" TargetType="RadioButton">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="RadioButton">
                    <Border x:Name="ButtonBorder"
                            Margin="4"
                            CornerRadius="4"
                            BorderBrush="{DynamicResource GrayColorBrush}"
                            BorderThickness="1">
                        <Label Content="{TemplateBinding Content}"
                               Style="{DynamicResource LabelS}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ButtonBorder"
                                    Property="Background"
                                    Value="{DynamicResource PrimaryColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="ButtonBorder"
                                    Property="Background"
                                    Value="{DynamicResource BackgroundStrong}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ButtonBorder"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--复选框-->
    <Style x:Key="CheckBoxNormal" TargetType="CheckBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="CheckBox">
                    <Border x:Name="BoxBorder"
                            Margin="4"
                            CornerRadius="4"
                            BorderBrush="{DynamicResource GrayColorBrush}"
                            BorderThickness="1">
                        <Label Content="{TemplateBinding Content}"
                               Style="{DynamicResource LabelS}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="BoxBorder"
                                    Property="Background"
                                    Value="{DynamicResource PrimaryColorBrush}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="False">
                            <Setter TargetName="BoxBorder"
                                    Property="Background"
                                    Value="{DynamicResource BackgroundStrong}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="BoxBorder"
                                    Property="Background"
                                    Value="{DynamicResource AccentColorBrush}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--输入框-->
    <Style x:Key="TextBoxNormal" TargetType="TextBox">
        <Setter Property="Foreground" Value="{DynamicResource Foreground}"/>
        <Setter Property="Background" Value="{DynamicResource BackgroundStrong}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontFamily" Value="Noto Sans SC"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="Margin" Value="4,0"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TextBox">
                    <Border x:Name="border"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{DynamicResource GrayColorBrush}"
                            BorderThickness="1"
                            SnapsToDevicePixels="True"
                            Padding="2"
                            CornerRadius="4">
                        <TextBlock Text="{TemplateBinding Text}"
                                   Foreground="{TemplateBinding Foreground}"
                                   VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                   HorizontalAlignment="{TemplateBinding HorizontalAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>